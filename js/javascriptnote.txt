push && pop
push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉：
var arr[1,2];
arr.push(3,4); //you can get[1,2,3,4];
arr.pop(); //you can get [1,2,3]

unshift && shift
    往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉:
var arr = [1,2];
arr.unshift(1,2); //you can get [1,2,1,2]
arr.shift(); //you can get[2,1,2]

slice截取Array的部分元素，然后返回一个新的Array：
var arr = [1,2,3,4,5];
arr.slice(0,4); //you can get [1,2,3,4]
arr.slice(2); //you can get[3,4,5]

indexOf
与String类似，Array也可以通过indexOf()来搜索一个指定的元素的位置：
var arr = ["a",1,2];
arr.indexOf(2); //you can get 3
arr.indexOf("asdasd"); //you can get -1

length
var arr = [1,2,3]
arr.length; //you can get 2
arr.length=6; //you can get [1,2,3,<3 empty slots>]
arr[1]=999; //you can get [1,999,3,<3 empty slots>]
arr[6]='x'; //you can get [1,999,3,<3 empty slots>,x]

sort
sort()可以对当前Array进行排序,会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序：
var arr=[1,2,'a','c','b'];
arr.sort(); //you can get[ 1, 2, "a", "b", "c" ]

reverse
reverse()把整个Array的元素给掉个个，也就是反转 change ltr to rtl:
var arr= [1,2,3];
arr.reverse() //you can get [3,2,1]

splice
splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：
var arr = [1,2,3,4,5,6,7,8,9]; //will return the element be deleted
	从索引2开始删除3个元素,然后再添加两个元素:
arr.splice(2,3,'google','baidu'); //you can get [3,4,5]
	只删除,不添加:
arr.splice(2,3); //you can get ['google','baidu',6]
	只添加,不删除:
arr.splice(2,0,'google','baidu'); //you can get []

concat
concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array：
var arr=[1,2,3];
var narr = arr.concat([2,3,4]);
narr; //you can get[1,2,3,2,3,4]
arr; //you can get[1,2,3]

join
join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：
var arr = [1,2,3];
arr.join('-'); //you can get 1-2-3
arr; //you can get [1,2,3]

多维数组
如果数组的某个元素又是一个Array，则可以形成多维数组，例如：
var arr = [[1, 2, 3], [400, 500, 600], '-'];
arr[1][1]; //you can get 500

访问属性是通过.操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用''括起来：
var ranyan = {name:ranyan, 'middle-school':'no1 school'};
ranyan['middle-school']; //you can get 'no1school'
ranyan['name']; //you can get 'ranyan'
ranyan.name; //you can get 'ranyan'
delete ranyan.name;
delete ranyan['middle-school'];
name in ranyan; //false
var ranyan = {name:ranyan};
name in ranyan; //true

要小心，如果in判断一个属性存在，这个属性不一定是xiaoming的，它可能是xiaoming继承得到的：
'toString' in ranyan; //true

要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法：
ranyan.hasOwnProperty('name');//true
ranyan.hasOwnProperty('toString');//false

JavaScript使用if () { ... } else { ... }来进行条件判断:
var age = 20;
if (age > 18) {
	alert('adult');
}else if (age >=6){
	alert('teenager');
}
    else{
	alert('lid');
}

BMI公式（体重除以身高的平方）:
var ranyan{
	height: 1.75
	weight: 80.5
}
var BMI=ranyan.weight/(ranyan.height*ranyan.height)
if (BMI > 32) {
	alert('too fat')
}else if (BMI > 28) {
	alert('fat')
}else if (BMI > 25) {
	alert('little fat')
}else if (BMI > 18.5) {
	alert('good')
}else if (BMI < 18.5) {
	alert('too thin')
}

#python 

sum = 0
for x in range(100):
    sum = sum +x
print sum

js.for...in...
var x = 0;
var i;
 for (i=1;i<=99;i++);{
   x = x + i;
}
x

利用for循环计算1 * 2 * 3 * ... * 10的结果：
var x = 1;
var i;
 for (i=1;i<=10;i++){
 x = x * i;
}
x;

计算100以内所有奇数之和:
var x;
var n = 99;
while (n > 0){
    x = x + n;
    n = n - 2;
}
x;

用do { ... } while()循环要小心，循环体会至少执行1次，而for和while循环则可能一次都不执行。
var n = 1
do {
	n = n +2
}while (n<100);
n;

var arr = ['jienigui','miaowazhongzi','xiaohuolong'];
);
    for (var i=0,i<arr.length,i++){
	alert(arr[i])
}

Map
初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：
var m = new Map(); // 空Map
m.set('Adam', 67); // 添加新的key-value
m.set('Bob', 59);
m.has('Adam'); // 是否存在key 'Adam': true
m.get('Adam'); // 67
m.delete('Adam'); // 删除key 'Adam'
m.get('Adam'); // undefined3

Set
Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。
var s1 = new Set(); // 空Set
var s2 = new Set([1, 2, 3]); // 含1, 2, 3
s.add();
s.delete();

请注意，for ... in对Array的循环得到的是String而不是Number。

#python
i = 1
x = 0
for i in range(1,100,2):
    x = x + i
print("x")

请利用循环遍历数组中的每个名字，并显示Hello, xxx!：
//for...//ltr
'use strict';
var arr = ['Bart', 'Lisa', 'Adam'];
var i,x;
for (i=0;i<arr.length;i++){
        x = arr[i];
        alert("Hello,"+x);
}

//while...//rtl // i = "1","2","3";arr.length-i="2","1,","0"

var i = 0;
while (i<arr.length){
             i = i+1;
            alert("Hello,"+arr[arr.length-i]);
}

/*
var i = arr.length;
var x;
while (i>=arr.length){
             x = i+1;
            alert(x);
} this a death*/

Array、Map和Set都属于iterable类型。
具有iterable类型的集合可以通过新的for ... of循环来遍历。
for ... in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。
for ... of它只循环集合本身的元素：
var a = ['A', 'B', 'C'];
a.name = 'Hello';
for (var x of a) {
    alert(x); // 'A', 'B', 'C'
}

forEach
注意，forEach()方法是ES5.1标准引入的，你需要测试浏览器是否支持。
var a = ['A', 'B', 'C'];
a.forEach(function (element) {
    alert(element);
});
var a = ['A', 'B', 'C'];
a.forEach(function (element, index, array)//this')'is for function {
    // element: 指向当前元素的值
    // index: 指向当前索引
    // array: 指向Array对象本身
    alert(element);//element can be index or array but when you need array,your function must have element,index,array,and if is index you need element index.
})//this ')' is for forEach;

定义函数调用函数
避免收到undefined，可以对参数进行检查：
function abs(x) {
    if (typeof x !== 'number') {
        throw 'Not a number';
    }
    if (x >= 0) {
        return x;
    } else {
        retu<F12>rn -x;
    }
}

str!=null && str!=undefined && str !=''
使用常见的三元操作符
if (foo) bar(); else baz(); ==> foo?bar():baz();
if (!foo) bar(); else baz(); ==> foo?baz():bar();
if (foo) return bar(); else return baz(); ==> return foo?bar():baz
使用and(&&)和or(||)运算符
if (foo) bar(); ==> foo&&bar();
if (!foo) bar(); ==> foo||bar();

请用rest参数编写一个sum()函数，接收任意个参数并返回它们的和：
function sum(...rest) {
    return rest.length === 0 ? 0 : eval(rest.join("+"));    
}
定义一个计算圆面积的函数area_of_circle()，它有两个参数：
    r: 表示圆的半径；
    pi: 表示π的值，如果不传，则默认3.14
function area_of_circle(r, pi) {
   return typeof arguments[1] === 'undefined' ? r*r*3.14 : r*r*pi;
}//arguments最常用于判断传入参数的个数 get 1 is r,else get 2 is r,pi. typeof is undefined is True,if not is False.

在一个方法内部，this是一个特殊变量，它始终指向当前对象，也就是xiaoming这个变量。所以，this.birth可以拿到xiaoming的birth属性。
this指针只在age方法的函数内指向xiaoming，在函数内部定义的函数，this又指向undefined了！（在非strict模式下，它重新指向全局对象window！）
'use strict'
var xiaoming = {
    name: 'xiaoming',
    birth: 1990,
    age: function () {
        var that = this; 
        function getAgeFromBirth() {
            var y = new Date().getFullYear();
            return y - that.birth;
        }
        return getAgeFromBirth();
    }
};
利用apply()，我们还可以动态改变函数的行为。
var count = 0;
var oldParseInt = parseInt;

window.parseInt = function() {
    count += 1;// === count = count+1
    return oldParseInt.apply(null, arguments);
};

练习：利用reduce()求积：

'use strict';

function product(arr) {
return arr.reduce(function (x, y){
       return x * y;
});
}
